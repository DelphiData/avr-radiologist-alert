name: AVR Debug

on:
  workflow_dispatch:
    inputs:
      action:
        description: "ids = list chat IDs, test = send test msg, run-monitor = run scraper+alert"
        required: true
        default: "run-monitor"
        type: choice
        options: [ids, test, run-monitor]
      message:
        description: "Test message text (used when action=test)"
        required: false
        default: "AVR Telegram test"
      channel_username:
        description: "Optional @channelusername to resolve (used when action=ids)"
        required: false
        default: ""
      force_alert:
        description: "Force alert for run-monitor (true/false)"
        required: false
        default: "false"

permissions:
  contents: write

jobs:
  debug:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      AVR_USERNAME: ${{ secrets.AVR_USERNAME }}
      AVR_PASSWORD: ${{ secrets.AVR_PASSWORD }}
      TIMEZONE: ${{ secrets.TIMEZONE }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_IDS: ${{ secrets.TELEGRAM_CHAT_IDS }}
      FORCE_ALERT: ${{ github.event.inputs.force_alert }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight diagnostics
        run: |
          echo "Ref: ${{ github.ref }}"
          echo "Action: ${{ github.event.inputs.action }}"
          python - <<'PY'
          import os
          for k in ["AVR_USERNAME","AVR_PASSWORD","TIMEZONE","TELEGRAM_BOT_TOKEN","TELEGRAM_CHAT_IDS"]:
              print(f"{k} present:", bool(os.environ.get(k,"")))
          print("FORCE_ALERT:", os.environ.get("FORCE_ALERT",""))
          PY

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pytz pyyaml

      # ===== IDs mode =====
      - name: Telegram getMe
        if: ${{ github.event.inputs.action == 'ids' }}
        run: |
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe" | jq .

      - name: Telegram getUpdates
        if: ${{ github.event.inputs.action == 'ids' }}
        run: |
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates" | tee updates.json | jq .

      - name: Extract chat IDs
        if: ${{ github.event.inputs.action == 'ids' }}
        run: |
          python - <<'PY'
          import json, sys
          try:
              j=json.load(open('updates.json'))
          except Exception as e:
              print("No updates.json or parse error:", e); sys.exit(0)
          seen=set()
          for r in j.get('result', []):
              m = r.get('message') or r.get('channel_post') or r.get('edited_message') or r.get('edited_channel_post')
              if not m: continue
              c=m.get('chat',{})
              cid=c.get('id'); typ=c.get('type'); name=c.get('title') or c.get('username') or ''
              if cid in seen: continue
              seen.add(cid)
              print(f"{typ}\t{cid}\t{name}")
          PY

      # ===== Test mode =====
      - name: Send Telegram test message
        if: ${{ github.event.inputs.action == 'test' }}
        run: |
          IFS=',' read -ra IDS <<< "$TELEGRAM_CHAT_IDS"
          for ID in "${IDS[@]}"; do
            ID="$(echo "$ID" | xargs)"
            echo "Sending to $ID"
            curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$ID" \
              --data-urlencode "text=${{ github.event.inputs.message }}" | jq .
          done

      # ===== Run monitor =====
      - name: Run monitor.py (creates/updates status.json)
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        run: |
          python monitor.py || true
          echo "--- status.json (if present) ---"
          [ -f status.json ] && cat status.json || echo "status.json not found"

      - name: Send Telegram alert via script
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        run: |
          python scripts/send_telegram.py

      - name: Upload artifacts
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            status.json
            docs/last_page.html
            docs/last_counts.csv
            docs/debug_first_response.html
            docs/debug_index.html
            docs/debug_login_page.html
            docs/debug_after_login_post.html
            docs/debug_after_login_redirect.html
            docs/debug_wl_attempt.html
            docs/debug_wl_final.html
          if-no-files-found: ignore
          retention-days: 7

      - name: Publish status.json to docs
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        run: |
          if [ -f status.json ]; then
            mkdir -p docs
            cp status.json docs/status.json
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add docs/status.json
            git commit -m "Debug: update status.json [skip ci]" || true
            git push
          else
            echo "status.json not found; skipping publish"
          fi
