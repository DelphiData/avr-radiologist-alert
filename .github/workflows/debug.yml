name: AVR Debug

on:
  workflow_dispatch:
    inputs:
      action:
        description: "ids = list chat IDs, test = send test msg, run-monitor = run scraper+alert"
        required: true
        default: "run-monitor"
        type: choice
        options: [ids, test, run-monitor]
      message:
        description: "Test message text (used when action=test)"
        required: false
        default: "AVR Telegram test"
      channel_username:
        description: "Optional @channelusername to resolve (used when action=ids)"
        required: false
        default: ""
      force_alert:
        description: "Force alert for run-monitor (true/false)"
        required: false
        default: "false"

permissions:
  contents: write

jobs:
  debug:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      AVR_USERNAME: ${{ secrets.AVR_USERNAME }}
      AVR_PASSWORD: ${{ secrets.AVR_PASSWORD }}
      TIMEZONE: ${{ secrets.TIMEZONE }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_IDS: ${{ secrets.TELEGRAM_CHAT_IDS }}
      FORCE_ALERT: ${{ github.event.inputs.force_alert }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pytz pyyaml

      - name: Preflight diagnostics
        run: |
          python - <<'PY'
          import os
          for k in ["AVR_USERNAME","AVR_PASSWORD","TIMEZONE","TELEGRAM_BOT_TOKEN","TELEGRAM_CHAT_IDS"]:
              print(f"{k} present:", bool(os.environ.get(k,"")))
          print("Action:", os.environ.get("GITHUB_ACTION_REF",""))
          print("FORCE_ALERT:", os.environ.get("FORCE_ALERT",""))
          PY

      # -------- ids mode --------
      - name: Telegram getMe
        if: ${{ github.event.inputs.action == 'ids' }}
        run: |
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe" | sed -e 's/\\u[0-9a-fA-F]\\{4\\}//g'

      - name: Telegram getUpdates
        if: ${{ github.event.inputs.action == 'ids' }}
        run: |
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates" > updates.json
          python - <<'PY'
          import json
          j=json.load(open('updates.json'))
          for r in j.get('result', []):
              m=r.get('message') or r.get('channel_post') or r.get('edited_message') or r.get('edited_channel_post')
              if not m: continue
              c=m.get('chat',{})
              print(f"{c.get('type')}\t{c.get('id')}\t{c.get('title') or c.get('username') or ''}")
          PY

      - name: Resolve channel username
        if: ${{ github.event.inputs.action == 'ids' && github.event.inputs.channel_username != '' }}
        run: |
          U="${{ github.event.inputs.channel_username }}"
          [[ "$U" == @* ]] || U="@${U}"
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getChat?chat_id=$U"

      # -------- test mode --------
      - name: Send Telegram test message
        if: ${{ github.event.inputs.action == 'test' }}
        run: |
          python - <<'PY'
          import os,requests
          token=os.environ["TELEGRAM_BOT_TOKEN"]
          ids=[x.strip() for x in os.environ.get("TELEGRAM_CHAT_IDS","").split(",") if x.strip()]
          msg=os.environ.get("INPUT_MESSAGE","AVR Telegram test")
          api=f"https://api.telegram.org/bot{token}/sendMessage"
          for cid in ids:
              r=requests.post(api,data={"chat_id":cid,"text":msg},timeout=20)
              print(cid,"->",r.ok,r.text[:200])
          PY

      # -------- run-monitor --------
      - name: Run monitor.py (creates/updates status.json)
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        run: |
          python monitor.py || true
          echo "--- status.json (if present) ---"
          [ -f status.json ] && cat status.json || echo "status.json not found"

      - name: Send Telegram alert via script
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        run: python scripts/send_telegram.py

      - name: Upload artifacts
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            status.json
            docs/last_page.html
            docs/last_counts.csv
            docs/last_screenshot.png
          if-no-files-found: ignore
          retention-days: 7

      - name: Publish status.json to docs
        if: ${{ github.event.inputs.action == 'run-monitor' }}
        run: |
          if [ -f status.json ]; then
            mkdir -p docs
            cp status.json docs/status.json
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add docs/status.json
            git commit -m "Debug: update status.json [skip ci]" || true
            git push
          else
            echo "status.json not found; skipping publish"
          fi
