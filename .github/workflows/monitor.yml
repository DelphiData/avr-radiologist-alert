name: AVR Monitor

on:
  workflow_dispatch:
    inputs:
      force_alert:
        description: "Force alert (bypass window/threshold) for testing"
        required: false
        default: "false"
  schedule:
    - cron: "0 * * * *"  # hourly in UTC (runs at top of every hour)

permissions:
  contents: write

concurrency:
  group: avr-monitor
  cancel-in-progress: false

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      AVR_USERNAME: ${{ secrets.AVR_USERNAME }}
      AVR_PASSWORD: ${{ secrets.AVR_PASSWORD }}
      TIMEZONE: ${{ secrets.TIMEZONE }}
      FORCE_ALERT: ${{ github.event.inputs.force_alert }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_IDS: ${{ secrets.TELEGRAM_CHAT_IDS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show commit and file fingerprints
        run: |
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          git --no-pager log -1 --pretty=fuller
          echo "monitor.py head:"
          sed -n '1,80p' monitor.py || true
          echo "grep BASE_URL:"
          grep -n "BASE_URL" -n monitor.py || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pytz pyyaml

      - name: Preflight diagnostics
        run: |
          python - <<'PY'
          import os, json, datetime as dt
          print("AVR_USERNAME present:", bool(os.getenv("AVR_USERNAME")))
          print("AVR_PASSWORD present:", bool(os.getenv("AVR_PASSWORD")))
          print("TIMEZONE:", os.getenv("TIMEZONE"))
          print("TELEGRAM_BOT_TOKEN present:", bool(os.getenv("TELEGRAM_BOT_TOKEN")))
          print("TELEGRAM_CHAT_IDS:", os.getenv("TELEGRAM_CHAT_IDS"))
          print("FORCE_ALERT:", os.getenv("FORCE_ALERT"))
          PY

      - name: Run monitor
        run: |
          python monitor.py || true
          echo "--- status.json (if present) ---"
          [ -f status.json ] && cat status.json || echo "status.json not found"

      - name: Send Telegram alert
        if: always()
        run: |
          python scripts/send_telegram.py

      - name: Write heartbeat (last_monitor_run.json)
        if: always()
        run: |
          mkdir -p docs
          python - <<'PY'
          import json, os, datetime as dt
          beat = {
            "time_utc": dt.datetime.utcnow().isoformat()+"Z",
            "event": "${{ github.event_name }}",
            "sha": "${{ github.sha }}",
            "ref": "${{ github.ref }}",
            "workflow": "AVR Monitor",
          }
          with open("docs/last_monitor_run.json","w",encoding="utf-8") as f:
              json.dump(beat,f,indent=2)
          print(beat)
          PY

      - name: Publish status and heartbeat to docs
        if: success() || failure()
        run: |
          mkdir -p docs
          if [ -f status.json ]; then
            cp status.json docs/status.json
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/status.json docs/last_monitor_run.json || true
          git commit -m "Monitor publish: status/heartbeat [skip ci]" || true
          git push
